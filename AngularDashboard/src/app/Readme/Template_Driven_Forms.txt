
  _____                     _    _               ______
 |  __ \                   | |  (_)             |  ____|
 | |__) | ___   __ _   ___ | |_  _ __   __ ___  | |__  ___   _ __  _ __ ___   ___
 |  _  / / _ \ / _` | / __|| __|| |\ \ / // _ \ |  __|/ _ \ | '__|| '_ ` _ \ / __|
 | | \ \|  __/| (_| || (__ | |_ | | \ V /|  __/ | |  | (_) || |   | | | | | |\__ \
 |_|  \_\\___| \__,_| \___| \__||_|  \_/  \___| |_|   \___/ |_|   |_| |_| |_||___/


* Import ReactiveFormsModule @app.modules.components.ts
* inject FormBuilder in the required component here @ new-post.component.ts
* create a global variable of FormGroup data type

  postForm: FormGroup | undefined;

constructor(private categoryService: CategoriesService, private fb: FormBuilder)
   {
      this.postForm = this.fb.group({
        title:[''],
        permalink:[''],
        excerpt:[''],
        category:[''],
        postImg:[''],
        content:['']
      })
   }

Assign FormGroup to the view i.e @new-post.component.html

    <form [formGroup]='postForm' action=""> //postForm is the name of the variable of FormGroup Data type

For using Form controls : =
    Add formControlName to all the inputs and it should be same as the key of the f.group({})

<input type="text" class="form-control" (keyup)="onTitleChanged($event)" formControlName="title">
<input type="text" class="form-control" [(ngModel)]="permalink" name="permalink"  formControlName="permalink" [attr.disabled]="true">
<textarea class="form-control" id="" cols="30" rows="10"  formControlName="excerpt"></textarea>
<input type="file" class="form-control" accept="image/*" (change)="showPreview($event)" formControlName="postImg">


  ______                       __      __     _  _      _         _    _
 |  ____|                      \ \    / /    | |(_)    | |       | |  (_)
 | |__  ___   _ __  _ __ ___    \ \  / /__ _ | | _   __| |  __ _ | |_  _   ___   _ __
 |  __|/ _ \ | '__|| '_ ` _ \    \ \/ // _` || || | / _` | / _` || __|| | / _ \ | '_ \
 | |  | (_) || |   | | | | | |    \  /| (_| || || || (_| || (_| || |_ | || (_) || | | |
 |_|   \___/ |_|   |_| |_| |_|     \/  \__,_||_||_| \__,_| \__,_| \__||_| \___/ |_| |_|

Add validators @ new-post.component.ts

constructor(private categoryService: CategoriesService, private fb: FormBuilder)
   {
      this.postForm = this.fb.group({
        title:['',[Validators.required,Validators.minLength(10)]],
        permalink:['',Validators.required],
        excerpt:['',[Validators.required,Validators.minLength(50)]],
        category:['',Validators.required],
        postImg:['',Validators.required],
        content:['',Validators.required]
      })
   }

then create an getter
  get fc()
  {
    return this.postForm.controls;
  }

add the error message in the view

 <input type="text" class="form-control" (keyup)="onTitleChanged($event)" formControlName="title" [ngClass]="{'is-invalid': fc['title'].touched && fc['title'].invalid}">
      <div *ngIf="fc['title'].errors?.['required']">
        <div class="alert alert-danger" *ngIf="fc['title'].touched && fc['title'].invalid"> Title is Required</div>
      </div>
      <div *ngIf="fc['title'].errors?.['minLength']">
        <div class="alert alert-danger" *ngIf="fc['title'].touched && fc['title'].invalid"> Title must be minimum 10 characters long</div>
      </div>
Repeat the above process for all the inputs
 and add the [ngClass]="{'is-invalid': fc['content'].touched && fc['content'].invalid}" at the end of all the input tags

  ______                         _____         _                 _            _
 |  ____|                       / ____|       | |               (_)          (_)
 | |__  ___   _ __  _ __ ___   | (___   _   _ | |__   _ __ ___   _  ___  ___  _   ___   _ __
 |  __|/ _ \ | '__|| '_ ` _ \   \___ \ | | | || '_ \ | '_ ` _ \ | |/ __|/ __|| | / _ \ | '_ \
 | |  | (_) || |   | | | | | |  ____) || |_| || |_) || | | | | || |\__ \\__ \| || (_) || | | |
 |_|   \___/ |_|   |_| |_| |_| |_____/  \__,_||_.__/ |_| |_| |_||_||___/|___/|_| \___/ |_| |_|



Add ngSubmit and assign it to a method in the view @ all-post.component.html
  <form [formGroup]='postForm' (ngSubmit)="onSubmit()">

@all-post.component.ts
onSubmit()
{
        console.log(this.postForm.value);
}

create an interface for post
models -> post.ts

  export interface Post {
  title: string,
  permalink: string,
  category: {
    categoryId: string,
    category: string
  },
  postImgPath: string,
  excerpt: string,
  content: string,
  isFeatured: boolean,
  views: number,
  status: string,
  createdAt: Date
}

in the logic part
i.e @ new-post.component.ts
@
the method onSubmit(){

      console.log(this.postForm.value);
      const postData: Post = {
          title: this.postForm.value.title,
          permalink: this.postForm.value.permalink,
          category: {
            categoryId: '',
            category: ''
          },
          postImgPath: '',
          excerpt: this.postForm.value.excerpt,
          content: this.postForm.value.content,
          isFeatured: false,
          views: 0,
          status: 'new',
          createdAt: new Date()
        }

} //initialize all these variables values

To get the id and the category name for the category {} here move to the view and send it at the input

 <option value="" disabled>Please select a Category</option>
  <option *ngFor="let category of categories" value="{{category.id}}-{{category.data.category}}">{{category.data.category}}</option>
value ="{}-{}" is the place where we send both the id and name
now we should split it at - and store it in categories {} @new-post.component.ts

 onSubmit()
  {
      // console.log(this.postForm.value);
     let splitted = this.postForm.value.category.split("-");
      const postData: Post = {
          title: this.postForm.value.title,
          permalink: this.postForm.value.permalink,
          category: {
            categoryId: splitted[0],
            category: splitted[1]
          },
          postImgPath: '',
          excerpt: this.postForm.value.excerpt,
          content: this.postForm.value.content,
          isFeatured: false,
          views: 0,
          status: 'new',
          createdAt: new Date()
        }
          console.log(postData);
      }


  _____                                                _                    _
 |_   _|                                              | |                  | |
   | |   _ __ ___    __ _   __ _   ___   _   _  _ __  | |  ___    __ _   __| |
   | |  | '_ ` _ \  / _` | / _` | / _ \ | | | || '_ \ | | / _ \  / _` | / _` |
  _| |_ | | | | | || (_| || (_| ||  __/ | |_| || |_) || || (_) || (_| || (_| |
 |_____||_| |_| |_| \__,_| \__, | \___|  \__,_|| .__/ |_| \___/  \__,_| \__,_|
                            __/ |              | |
                           |___/               |_|
will upload the image to the cloud storage and update the image path @   postImgPath: '',inside the onSubmit()
of @ new-post.component.ts
    goto firebase account -> dashboard -> storage -> next -> next -> Done
        --> rules -> remove the : if false part for now

import AngularFireStorageModule @app.module.ts

import {AngularFireStorageModule} from '@angular/fire/compat/storage/storage.module';

create a new service file at services/posts

inject AngularFireStorage @ posts.services.ts and create an method for getting the path

constructor(private storage: AngularFireStorage) { }

  uploadImage(selectedImage: any)
  {
    const filePath = `postIMG/${Date.now()}`;
    console.log(filePath);
  }

@new-post.component.ts inject post service and pass the parameter on click
  constructor(private categoryService: CategoriesService, private fb: FormBuilder,private postService: PostsService)

onSubmit()
  {
     :
     :
     :
     :
      this.postService.uploadImage(this.selectedImage);
  }
to upload
@ post.service.ts ->
uploadImage(selectedImage: any)
  {
    const filePath = `postIMG/${Date.now()}`;
    console.log(filePath);
    this.storage.upload(filePath, selectedImage).then(()=>{
      console.log("Image uploaded Successfully");
    });
  }

update the imagePath
@new-post.component.ts
onSubmit()
  {
   :
   :
   :
      this.postService.uploadImage(this.selectedImage, postData); //read the second input
      }
  }

@posts.services.ts
uploadImage(selectedImage: any, postData: any)
  {
    :
    :
      this.storage.ref(filePath).getDownloadURL().subscribe(URL =>{
        console.log(URL);
        postData.postImgPath = URL;
        console.log(postData);
      });
    });
  }

  for reading the uploaded image's URL for saving

Insert by importing angular firestore
@post.service.ts
constructor(private storage: AngularFireStorage,private afs: AngularFirestore , private toaster: ToastrService) { }

  uploadImage(selectedImage: any, postData: any)
  {
    :
    :
        this.afs.collection('posts').add(postData).then(docRef=>{
            this.toaster.success("Data inserted Successfully..");
        })
      });
    });
  }

Reset the form after inserting it .
@ new-post.component.ts
onSubmit()
  {
      :
      :
      this.postService.uploadImage(this.selectedImage, postData);
      this.postForm.reset();
      this.imgSrc = './assets/place_holder.jpg';
          }


  _                        _   _    _                                _
 | |                      | | | |  | |                              | |
 | |      ___    __ _   __| | | |_ | |__    ___   _ __    ___   ___ | |_
 | |     / _ \  / _` | / _` | | __|| '_ \  / _ \ | '_ \  / _ \ / __|| __|
 | |____| (_) || (_| || (_| | | |_ | | | ||  __/ | |_) || (_) |\__ \| |_
 |______|\___/  \__,_| \__,_|  \__||_| |_| \___| | .__/  \___/ |___/ \__|
                                                 | |
                                                 |_|
 @ posts.services.ts

 loadData()
  {
    return this.afs.collection('posts').snapshotChanges().pipe(map(actions =>{
      return actions.map(a =>{
        const data = a.payload.doc.data();
        const id = a.payload.doc.id;
        return {id, data}
      })
    }))
  }
and load it in the @all-post.component.ts
  constructor(private postService: PostsService ) { }

ngOnInit(): void {
    this.postService.loadData().subscribe(val =>{
      console.log(val);
    });
  }
and display in @all-post.component.html

 * Editing the post detail on button click
 we now need to pass the id of the post to load the details of that oneparticular item form firebase

<button class="btn btn-sm btn-warning" routerLink="/post/new" [queryParams]="{id: post.id}">
Edit
</button>


  _                        _                            _                                              _
 | |                      | |                          | |                                            | |
 | |      ___    __ _   __| |   ___   _ __    ___    __| |  ___    ___  _   _  _ __ ___    ___  _ __  | |_
 | |     / _ \  / _` | / _` |  / _ \ | '_ \  / _ \  / _` | / _ \  / __|| | | || '_ ` _ \  / _ \| '_ \ | __|
 | |____| (_) || (_| || (_| | | (_) || | | ||  __/ | (_| || (_) || (__ | |_| || | | | | ||  __/| | | || |_
 |______|\___/  \__,_| \__,_|  \___/ |_| |_| \___|  \__,_| \___/  \___| \__,_||_| |_| |_| \___||_| |_| \__|

inject ActivatedRoute @ new-post.component.ts

constructor(private categoryService: CategoriesService, private fb: FormBuilder,private postService: PostsService, private route: ActivatedRoute)
   {
     this.route.queryParams.subscribe(val =>{
      console.log(val);
     })
@ posts.service.ts

create an method
loadOneData(id: any)
  {
   return this.afs.collection('posts').doc(id).valueChanges();
  }

@ new-post.component.ts
